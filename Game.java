package javahouse;

import java.awt.Graphics2D;
import java.awt.Point;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.awt.event.KeyEvent;



/**
 * Actual game.
 * 
 * @author www.gametutorial.net
 */

public class Game {

    //vars
    public static final int TILE_SIZE = 64;

    private TileMap map;
    private Player player = null;
    private int frameWidth;
    private int frameHeight;
    private Camera camera;
    private DialogBox dialog;
    private boolean paused = false;

    //time
    private long startTime;

    public Game()
    {
        Framework.gameState = Framework.GameState.GAME_CONTENT_LOADING;
        
        Thread threadForInitGame = new Thread() {
            @Override
            public void run(){
                // Sets variables and objects for the game.
                Initialize();
                // Load game files (images, sounds, ...)
                LoadContent();
                
                Framework.gameState = Framework.GameState.PLAYING;
            }
        };
        threadForInitGame.start();
    }
    
    
   /**
     * Set variables and objects for the game.
     */
    private void Initialize()
    {
        this.startTime = System.currentTimeMillis();
        this.map = new TileMap("map1.txt", this);
        //player generated by map
        //camera
        this.camera = new Camera(this);
        //dialog box
        this.dialog = new DialogBox(this);
        //menus

    }
    
    /**
     * Load game files - images, sounds, ...
     */
    private void LoadContent()
    {
        //this.map.parseMap();
        try {
            this.map.initialize();
        } catch(FileNotFoundException e) {e.printStackTrace();}
        //sprites
        this.map.loadSprites();
        //images
        //camera (it needs it all loaded to init)
        this.camera.initialize();
    
    }    
    
    
    /**
     * Restart game - reset some variables.
     */
    public void RestartGame()
    {
        
    }
    
    
    /**
     * Update game logic.
     * 
     * @param gameTime gameTime of the game.
     * @param mousePosition current mouse position.
     */
    public void UpdateGame(long gameTime, Point mousePosition)
    {
        if(this.paused)
        {
            //update menus
            if(dialog.isVisible())
            {
                dialog.update();
            }
        }
        else
        {   
            //update player logic
            this.player.update();
            //sprites
            for(Npc npc : this.map.getNpcs())
            {
                npc.update();
            }
            //update camera
            this.camera.update();
            //update dialog boxes
            //collision prevention in sprite class
        }
    }
    
    /**
     * Draw the game to the screen.
     * 
     * @param g2d Graphics2D
     * @param mousePosition current mouse position.
     */
    public void Draw(Graphics2D g2d, Point mousePosition)
    {
        g2d.translate(-this.camera.camX, -this.camera.camY);
        this.map.drawMap(g2d);
        this.player.draw(g2d);
        for(Npc npc : this.map.getNpcs())
        {
            npc.draw(g2d);
        }
        g2d.translate(this.camera.camX, this.camera.camY);
        if(this.dialog.isVisible())
        {
            this.dialog.draw(g2d);
        }
    }

    //MY SETTERS

    public void setFrameWidth(int width)
    {
        this.frameWidth = width;
    }
    public void setFrameHeight(int height)
    {
        this.frameHeight = height;
    }

    public void setPlayer(Player p)
    {
        if(this.player == null)
        {
            this.player = p;
        }
        else
        {
            this.player.setLoc(p.getLoc());
        }
    }

    public void setPaused(boolean b)
    {
        this.paused = b;
    }

    public void showDialog(boolean b)
    {
        if(b)
        {
            this.paused = true;
            this.dialog.setVisible(true);
        }
        else
        {
            this.dialog.close();
            this.paused = false;
        }
    }

    //MY GETTERS

    //returns reference to map
    public TileMap getMap()
    {
        return this.map;
    }

    //reference to player
    public Player getPlayer()
    {
        return this.player;
    }

    //reference to dialogBox
    public DialogBox getDialogBox()
    {
        return this.dialog;
    }

    /*game tile size, used in various places
    public static int getFinalTileSize()
    {
        return TILE_SIZE;
    }*/

    //frame size
    public int getFrameWidth()
    {
        return this.frameWidth;
    }
    public int getFrameHeight()
    {
        return this.frameHeight;
    }

    //pause state
    public boolean isPaused()
    {
        return this.paused;
    }

    //runtime
    public int getRunTime()
    {
        long time = System.currentTimeMillis();
        int runtime = (int) (time - this.startTime)/1000;
        return runtime;
    }
}
